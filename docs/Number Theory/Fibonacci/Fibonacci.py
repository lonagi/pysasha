#!/usr/bin/env python
# coding: utf-8

# # –§–∏–±–æ–Ω–∞—á—á–∏. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ

# ### #–ó–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è IPython

from IPython.display import Image
from IPython.display import Javascript
from IPython.core.display import HTML 
Image(url="https://hightech.fm/wp-content/uploads/2019/06/antlia2-collision-2.jpg", width=400)


# –ò—Å—Ç–æ—á–Ω–∏–∫: –í–∏–∫–∏–ø–µ–¥–∏—è
# 
# >–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ ‚Äî —ç–ª–µ–º–µ–Ω—Ç—ã —á–∏—Å–ª–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —á–∏—Å–ª–∞ —Ä–∞–≤–Ω—ã –ª–∏–±–æ 1 –∏ 1, –ª–∏–±–æ 0 –∏ 1, –∞ –∫–∞–∂–¥–æ–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ —Å—É–º–º–µ –¥–≤—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —á–∏—Å–µ–ª.
# 

# –ë–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏ $ \{F_n\} $ –∑–∞–¥–∞—ë—Ç—Å—è –ª–∏–Ω–µ–π–Ω—ã–º —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º:
# 
# $ F_0=0,\; F_1=1,\;\;\; F_n={F_{n-1}}+{F_{n-2}},\;\;\; n \geq2,\; n \in Z  $

# –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –º–æ–µ–π —Ä–∞–±–æ—Ç—ã

import numpy as np
import sympy as sp
import pandas as pd
import random as r
import time
import matplotlib.pyplot as plt
import ipyturtle as turtle

from scipy.ndimage.filters import gaussian_filter1d
from scipy.signal import savgol_filter


# –°–ø–µ—Ä–≤–∞, –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ä–∞–≤–Ω–∏–º –∏—Ö, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π–¥—ë–º –∫ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∏ –∑–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç–∏  
# 
# ---  
# 
# –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–Ω–∞—á–∞–ª–∞ —è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ —Ä–µ–∫—É—Ä—Å–∏–µ–π.  
# –ù–∞ –≤—Ö–æ–¥ –º—ã –ø–æ–¥–∞—ë–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤–æ –≤—Å–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∞ –Ω–∞ –≤—ã—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ–º —Å–∞–º–æ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏.  
# –ò —Ç–∞–∫ —è –±—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è –¥–µ–ª–∞—Ç—å –∏ –¥–∞–ª—å—à–µ.

def RecursionFibonacci(index): 
    if index==1: 
        return 0
    elif index==2: 
        return 1
    else: 
        return RecursionFibonacci(index-1)+RecursionFibonacci(index-2) 

#–ù–∞—Ö–æ–¥–∏–º –¥–µ–≤—è—Ç–æ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏
RecursionFibonacci(9)


# –í–æ—Ç, –≤—Ä–æ–¥–µ –±—ã—Å—Ç—Ä–æ –≤—ã—à–ª–æ, –Ω–æ –¥–∞–≤–∞–π—Ç–µ –∑–∞–º–µ—Ä–∏–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

get_ipython().run_line_magic('time', 'RecursionFibonacci(9)')
("")


# –ù—É....—Ç–∞–∫ –Ω–µ –ø–æ–π–¥—ë—Ç.  
# –ò–∑–º–µ—Ä—è—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –ª—É—á—à–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è—Ö —Ñ—É–Ω–∫—Ü–∏–∏.  
# –¢–æ –µ—Å—Ç—å —Å–¥–µ–ª–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –º–Ω–æ–≥–æ —Ä–∞–∑

get_ipython().run_line_magic('timeit', 'RecursionFibonacci(9)')


# –ò —ç—Ç–æ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º –¥–µ–≤—è—Ç–æ–µ —á–∏—Å–ª–æ!  
# –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–µ. –¢–æ–≥–¥–∞ –∑–∞–º–µ—Ä–∏–º —Å—Ä–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ —ç—Ç–∏—Ö —á–∏—Å–µ–ª


#%timeit RecursionFibonacci(r.randint(1,50))


# –î–∞ –Ω—É –µ–≥–æ! –ò –Ω–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ. –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 3 –º–∏–Ω—É—Ç. –î–∞–≤–∞–π-—Ç–µ –ø–æ–Ω–∏–∑–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ

get_ipython().run_line_magic('timeit', 'RecursionFibonacci(r.randint(1,5))')


# –î–æ–≤–æ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è. –ü—Ä–∏–º–µ—Ä–Ω–æ 15 —Å–µ–∫—É–Ω–¥ —ç—Ç–æ –≤—ã—á–∏—Å–ª—è–ª–æ—Å—å üòÄ  
# 
# –ü–æ–ø—Ä–æ–±—É—é –∑–∞–º–µ—Ä–∏—Ç—å —Ç–µ–ø–µ—Ä—å –ø–æ-—Å–≤–æ–µ–º—É. –ò –∑–∞–æ–¥–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø–æ–¥–∞–¥–∏–º –Ω–∞ –≤—Ö–æ–¥.


#–°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–π–º–∏–Ω–≥–∏
s = np.array([])

#–°–¥–µ–ª–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∏–µ, —á—Ç–æ –±—É–¥–µ–º –ø–æ–¥–∞–≤–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥ –∏–Ω–¥–µ–∫—Å—ã –æ—Ç 15 –¥–æ 50
for i in range(15,40):
    
    #–í–∫–ª—é—á–∞–µ–º "—Ç–∞–π–º–µ—Ä"
    start_time = time.time()
    
    RecursionFibonacci(i)
    
    #–°—Ç–æ–ø —Ç–∞–π–º–µ—Ä (–≤—Ä–µ–º—è –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏)
    end_time = (time.time() - start_time)
    s=np.append(s,end_time)
    #print("--- %s seconds ---" % end_time)


# –í–æ—Ç —Ç–∞–∫–∏–µ –±—É–¥—É—Ç –∑–Ω–∞—á–µ–Ω–∏—è!
# 
# | –ù–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏ | –í—Ä–µ–º—è |
# | :-- | :-- |
# | 10 | 0.01 —Å–µ–∫—É–Ω–¥ |
# | 11 | 0.02 —Å–µ–∫—É–Ω–¥ |
# | 12 | 0.03 —Å–µ–∫—É–Ω–¥ |
# | 13 | 0.05 —Å–µ–∫—É–Ω–¥ |
# | 14 | 0.08 —Å–µ–∫—É–Ω–¥ |
# | 15 | 0.13 —Å–µ–∫—É–Ω–¥ |
# | 16 | 0.22 —Å–µ–∫—É–Ω–¥ |
# | 17 | 0.36 —Å–µ–∫—É–Ω–¥ |
# | 18 | 0.58 —Å–µ–∫—É–Ω–¥ |
# | 19 | 0.9 —Å–µ–∫—É–Ω–¥ |
# | 20 | 1.5 —Å–µ–∫—É–Ω–¥ |
# | 21 | 2.4 —Å–µ–∫—É–Ω–¥ |
# | 22 | 4.0 —Å–µ–∫—É–Ω–¥ |
# | 23 | 6.4 —Å–µ–∫—É–Ω–¥ |
# | 24 | 10 —Å–µ–∫—É–Ω–¥ |
# | 25 | 16.97 —Å–µ–∫—É–Ω–¥ |

# In[392]:


def drawPlot(ss,title="–°–∫–æ—Ä–æ—Å—Ç–∏",y="–°–µ–∫—É–Ω–¥",x="–ù–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏"):
    fig,ax=plt.subplots(figsize=(6,6))
    ax.set_facecolor("#F2F2F2")
    ax.grid()
    ax.set_title(title)
    ax.set_ylabel(y)
    ax.set_xlabel(x)
    ax.plot(ss)

drawPlot(s)


# –î–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ –±—É–¥–µ—Ç –∏–¥—Ç–∏ —Ä–µ–∫—É—Ä—Å–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞  
# –ü—Ä–∏—á—ë–º, –º–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é: $ {-30}\over{x-50} $ 

# –•–æ—Ä–æ—à–æ, –∞ –¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ–π –∂–µ —Ä–µ–∫—É—Ä—Å–∏–µ–π –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.  
# –ó–∞—Ç–µ–º, –∑–∞–º–µ—Ä–∏–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

#–ú–∞—Å—Å–∏–≤ —Å —á–∏—Å–ª–∞–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏
FibArray=np.array([0,1])
  
def RecursionFibonacciSequence(index): 
    global FibArray
    
    if index<=len(FibArray): 
        return FibArray[index-1]
    else: 
        fib=RecursionFibonacciSequence(index-1)+RecursionFibonacciSequence(index-2) 
        FibArray=np.append(FibArray,fib) 
        return fib 
    
RecursionFibonacciSequence(92)
("")
#–ò—Ç–∞–∫, –≤–æ—Ç –ø–µ—Ä–≤—ã–µ 92 —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
#FibArray

get_ipython().run_line_magic('time', 'RecursionFibonacciSequence(92)')
("")


get_ipython().run_line_magic('timeit', 'RecursionFibonacciSequence(92)')
("")


# ---
# –ß—Ç–æ-–∂...–î–∞–≤–∞–π—Ç–µ –≥–ª—è–Ω–µ–º –Ω–∞ –¥—Ä—É–≥–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º

#–ü—Ä–∏–º–µ–Ω–∏–º –∏—Ç–µ—Ä–∞—Ü–∏–æ–∏–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–µ—Å—Ç–∞
def IterationFibonacci(index): 
    a=0
    b=1
    if index == 0: 
        return a 
    elif index == 1: 
        return b 
    else: 
        for i in range(2,index): 
            c=a+b 
            a=b 
            b=c 
        return b

IterationFibonacci(90000) #–î–æ–≤–æ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –Ω–∞—à–ª–æ
("")


# –¢–µ–ø–µ—Ä—å –∑–∞–º–µ—Ä–∏–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –ø–æ—Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫.  
# 
# –î–ª—è –±–æ–ª–µ–µ —Å–≥–ª–∞–∂–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º –µ–≥–æ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä –ì–∞—É—Å—Å–∞

s2 = np.array([])
for i in range(15,5000):
    start_time = time.time()
    IterationFibonacci(i)
    end_time = (time.time() - start_time)
    s2=np.append(s2,end_time)
    #print("--- %s seconds ---" % end_time)
    
s2 = gaussian_filter1d(s2, sigma=100)
drawPlot(s2)

get_ipython().run_line_magic('time', 'IterationFibonacci(50000)')
("")
get_ipython().run_line_magic('timeit', 'IterationFibonacci(50000)')
("")


# –î–∞–∂–µ –Ω–∞ —Ç–∞–∫–∏—Ö —á–∏—Å–ª–∞—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–æ—Ä–∞–∑–¥–æ –±—ã—Å—Ç—Ä–µ–µ. –î–∞ –∏ –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞–ª –±–æ–ª–µ–µ –ª–∏–Ω–µ–π–Ω—ã–º.  
# 
# –û–∫–µ–π. –ê –µ—Å–ª–∏ —Å–¥–µ–ª–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º, –∏—Å–ø–æ–ª—å–∑—É—è while? 

def whileFibonacci(index):
    a=0
    b=1
    i=0
    while i<index-2:
        c=a+b
        a=b
        b=c
        i+=1

    return b

whileFibonacci(90000)
("")

s3 = np.array([])
for i in range(15,5000):
    start_time = time.time()
    IterationFibonacci(i)
    end_time = (time.time() - start_time)
    s3=np.append(s3,end_time)
    #print("--- %s seconds ---" % end_time)
    
s3 = gaussian_filter1d(s3, sigma=100)
drawPlot(s3)

get_ipython().run_line_magic('time', 'whileFibonacci(50000)')
("")

get_ipython().run_line_magic('timeit', 'whileFibonacci(50000)')
("")


# –í—ã—Ö–æ–¥–∏—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –±–æ–ª–µ–µ –º–µ–Ω–µ–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã.   
# –•–æ—Ç—è, —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, **while** –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ **for** –∏–∑-–∑–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤—Ç–æ—Ä–æ–≥–æ.  
# 
# –ê —Ç–µ–ø–µ—Ä—å —Å–º–æ—Ç—Ä–∏—Ç–µ. –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º.  
# –ï—Å—Ç—å —Ç–∞–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –ë–∏–Ω–µ: $ {F_n}={ {\varphi^n - (-\varphi)^{-n}}\over{2\varphi-1} } $, –≥–¥–µ $\varphi$ - –∑–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ, –æ –∫–æ—Ç–æ—Ä–æ–º –∫—Å—Ç–∞—Ç–∏ –º—ã –ø–æ—Ç–æ–º –µ—â—ë –ø–æ–≥–æ–≤–æ—Ä–∏–º, –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–∞—Ç—å—è—Ö.
# 
# –ï–¥–∏–Ω—Å—Ç–µ–Ω–Ω—ã–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ñ–æ—Ä–º—É–ª—ã –≤ —Ç–æ–º, —á—Ç–æ –æ–Ω–∞ –≤—ã–¥–∞—ë—Ç –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–¥—ë—Ç—Å—è –æ–∫—Ä—É–≥–ª—è—Ç—å.

# –ê –µ—â—ë –∫—Å—Ç–∞—Ç–∏ –µ—Å–ª–∏ –ø–æ–¥–∞–≤–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥ –±–æ–ª—å—à–∏–µ –∏–Ω–¥–µ–∫—Å—ã, —Ç–æ –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ –≤—ã—Ö–æ–¥–µ.  
# –ü–æ—ç—Ç–æ–º—É –≤–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏–∑ **Sympy**, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —ç—Ç–∏—Ö –ø—Ä–æ–±–ª–µ–º.

#roundi - –µ—Å–ª–∏ True, —Ç–æ —á–∏—Å–ª–æ –±—É–¥–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º, –∏ —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —É—Å–∫–æ—Ä–∏—Ç—å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞
def Binetformula(index,roundi=True):
    from sympy import Pow as mmmpow
    from sympy import Integer as mmmint
    from sympy import N as mmmn
    b = (mmmpow(1.6185,index)-mmmpow(-0.6185,index))/2.237
    if(not roundi):
        return mmmint(b)
    else:
        return mmmn(b)
    
#sp.Integer(Binetformula(50000))


# –ü–æ–ª—É—á–∞–µ–º —Ç–∞–∫–æ–µ —á–∏—Å–ª–æ $ 1.92983840772735‚ãÖ10^{10455} $, –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–∏–º–ø–∞—é. –ò –µ—Å–ª–∏ –Ω–∞–¥–æ –±—É–¥–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ "–ø–æ–ª–Ω–æ–π" —Ñ–æ—Ä–º–µ –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π **sympy.Integer()**  
# 
# –¢–µ–ø–µ—Ä—å –∑–∞–º–µ—Ä–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏

s4 = np.array([])
for i in range(15,5000):
    start_time = time.time()
    Binetformula(i)
    end_time = (time.time() - start_time)
    s4=np.append(s4,end_time)
    
#–ò—Å–ø–æ–ª—å–∑—É–µ–º Savitzky‚ÄìGolay filter
s4 = savgol_filter(s4,7,1)
drawPlot(s4)


# –û—É—É—É—É—É—É..... –ê —ç—Ç–æ –Ω–µ—á—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ. –ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ç–∞–ª –ª–∏–Ω–µ–π–Ω—ã–º (+ -), –Ω–æ –∏ —É–≥–æ–ª –º–µ–∂–¥—É —è–¥—Ä–æ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –æ—Å–∏ –• —Å—Ç–∞–ª –ø—Ä–∏–±–ª–∏–∂–∞—Ç—å—Å—è –∫ 0.

get_ipython().run_line_magic('time', 'Binetformula(50000)')
("")


get_ipython().run_line_magic('timeit', 'Binetformula(50000)')
("")


# –ö–∞–∫ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å, —Ä–∞–∑–Ω–∏—Ü–∞ –≤ ~1000 —Ä–∞–∑, –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –∏ —Ä–µ–∫—É—Ä—Å–∏—è–º–∏.  
# –¢–æ —á—Ç–æ –º—ã –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å –∑–∞ 30 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥, –º—ã —É–∑–Ω–∞—ë–º –∑–∞ 60 **–º–∏–∫—Ä–æ**—Å–µ–∫—É–Ω–¥!
# 
# –ü—Ä–∞–≤–¥–∞ —ç—Ç–æ —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º –≤—Å—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª.  
# –ê –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ –≤ –ø–æ–ª–Ω—É—é —Ñ–æ—Ä–º—É?

get_ipython().run_cell_magic('timeit', '', '#–ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ–± –∫–∞–∂–¥–∞—è —Ü–∏—Ñ–æ—Ä–∫–∞ –±—ã–ª–∞ :3\n\nsp.Integer(Binetformula(50000))\n;')


# –•–º. –¢–µ—Å—Ç —Ç–∞–∫ –∂–µ –ø—Ä–æ–≤–µ–¥—ë–Ω –Ω–∞ 10 000 –ø–æ–≤—Ç–æ—Ä–æ–≤, –Ω–æ —Å—Ç–∞–ª–æ –¥–æ–ª—å—à–µ –ª–∏—à—å –Ω–∞ 4-10 –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥ üò≤

# –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º. –ú–∞—Ç—Ä–∏—á–Ω—ã–π.  
# 
# –ù–æ –¥–∞–∂–µ —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± —è —Å–º–æ–≥ –ø–æ–¥–µ–ª–∏—Ç—å –Ω–∞ –¥–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏. –î–∞–ª–µ–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–æ

#–ó–¥–µ—Å—å –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–∞—Ç—Ä–∏—á–Ω–æ–µ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å

def __pow(x,n,I):
    if n==0:
        return I
    elif n==1:
        return x
    else:
        y = __pow(x,n//2,I)
        y = y.dot(y)
        if n%2:
            y = x.dot(y)
        return y

def MatrixFibonacci(index):
    F = __pow(np.array(((1,1),(1,0)),dtype=object),index,np.eye(2))
    return F[0][1]

MatrixFibonacci(50000)
("")

#–ê —Ç—É—Ç Numpy –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å –º–∞—Ç—Ä–∏—Ü—ã

def MatrixFibonacci2(index):
    return np.linalg.matrix_power(np.matrix(((1,1),(1,0)),dtype=object),index)[0,1]

MatrixFibonacci2(50000)
("")


# –°—Ä–∞–≤–Ω–∏–º —Å—Ä–∞–∑—É –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ Numpy –∏ —Ä—É—á–Ω–æ–π


# –†—É—á–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

s5 = np.array([])
for i in range(15,5000):
    start_time = time.time()
    MatrixFibonacci(i)
    end_time = (time.time() - start_time)
    s5=np.append(s5,end_time)
    
s5 = gaussian_filter1d(s5,sigma=100)
drawPlot(s5)


# Numpy –≤–∞—Ä–∏–∞–Ω—Ç

s6 = np.array([])
for i in range(15,5000):
    start_time = time.time()
    MatrixFibonacci2(i)
    end_time = (time.time() - start_time)
    s6=np.append(s6,end_time)
    
s6 = gaussian_filter1d(s6,sigma=100)
drawPlot(s6)


get_ipython().run_line_magic('time', 'MatrixFibonacci(50000)')
("")
get_ipython().run_line_magic('time', 'MatrixFibonacci2(50000)')
("")

get_ipython().run_line_magic('timeit', 'MatrixFibonacci(50000)')
("")
get_ipython().run_line_magic('timeit', 'MatrixFibonacci2(50000)')
("")


# –ü–æ–¥–≤–µ–¥—ë–º –∏—Ç–æ–≥  
# 
# –ö–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—à—å –æ–¥–∏–Ω —Ä–∞–∑ –º–∞—Ç—Ä–∏—á–Ω—ã–π —Ä—É—á–Ω–æ–π —Å–ø–æ—Å–æ–±, —Ç–æ –æ–Ω –Ω–∞–π–¥—ë—Ç —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –ø–æ –Ω–æ–º–µ—Ä—É 50000 –∑–∞ **12 –º—Å**,  
# –Ω–æ —Å–ø–æ—Å–æ–± –º–∞—Ç—Ä–∏—á–Ω—ã–π –∏–∑ Numpy –∑–∞ **8 –º—Å**.
# 
# –î–∞ –∏ –ø–æ –≥—Ä–∞—Ñ–∏–∫–∞–º –≤—ã–≥–æ–¥–Ω—ã–µ –¥–ª—è –Ω–∞—Å –ø—Ä–æ–≤–∞–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å—Ç—å —É –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–æ—Å–æ–±–∞. –¢–æ –µ—Å—Ç—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã, –Ω–æ –∏–Ω–æ–≥–¥–∞ –º–∞—Ç—Ä–∏—á–Ω—ã–π –æ—Ç Numpy –º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ, –æ–¥–Ω–∞–∫–æ –ø–æ—á–µ–º—É-—Ç–æ –ø—Ä–∏ –∑–∞–º–µ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ç–æ –ø–æ—á–µ–º—É-—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ **~30%** –∏–º–µ–Ω–Ω–æ —Ä—É—á–Ω–æ–µ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å.

# # –õ—É—á—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º?

# –ö–∞–∫ –≤–∏–¥–Ω–æ –∏–∑ –º–æ–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—É–ª–∞ –ë–∏–Ω–µ –ø–æ–∫–∞–∑–∞–ª–∞ –Ω–∞–∏–≤—ã—Å—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ–¥–Ω–∞–∫–æ –º—ã –Ω–µ –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ ~$ 100 $  
# –õ–∏—á–Ω–æ —è –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É –ë–∏–Ω–µ, –Ω–æ –Ω–∞–≤–µ—Ä–Ω–æ–µ –ø–æ–∫–∞ —á—Ç–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ–π, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç—Ä–∏—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º.
# 
# –ú–æ–∂–Ω–æ —Ç–µ–ø–µ—Ä—å –≤—ã–∑–≤–∞—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏:

#RecursionFibonacci(30)             # 241 ms
#IterationFibonacci(30)             # 4 ms

#IterationFibonacci(500000)         # 2.79 s
#sp.Integer(Binetformula(500000))   # 366 ms
#MatrixFibonacci(500000)            # 252 ms
#MatrixFibonacci2(500000)           # 270 ms


# –ê –µ—Å–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ—Ç —Å —Ç–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, —Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ   
# 
# –†–µ–∫—É—Ä—Å–∏—è - —É–∂–∞—Å.  
# –ò—Ç–µ—Ä–∞—Ü–∏—è - —Ç–∞–∫ —Å–µ–±–µ.  
# –ë–∏–Ω–µ - –•–æ—Ä–æ—à–æ!  
# –ú–∞—Ç—Ä–∏—Ü–∞ - –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!!  
# 
# –û–¥–Ω–∞–∫–æ, —á—Ç–æ –Ω–∞–¥–æ –∑–∞–º–µ—Ç–∏—Ç—å, –ë–∏–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å—ë —Ç–∞–∫–∏ **–≥–æ—Ä–∞–∑–¥–æ –±—ã—Å—Ç—Ä–µ–µ** –≤—Å–µ—Ö. –ü—Ä–æ—Å—Ç–æ –µ–º—É –Ω–∞–¥–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–∞–º –≤—ã–≤–æ–¥ —á–∏—Å–ª–∞. –ê —Ç–æ—á–Ω–µ–µ, —ç—Ç–æ –Ω–∞–¥–æ –∏–º–µ–Ω–Ω–æ –º–æ–µ–π —Ñ—É–Ω–∫—Ü–∏–∏.  
# –ï—Å–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç sympy, —Ç–æ –ø—Ä–æ—Å—Ç–æ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞.
# 
# –ß—Ç–æ –∫–∞—Å–∞–µ–º–æ –º–∞—Ç—Ä–∏—á–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ - —è –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ—á–µ–º—É numpy —Ä–∞–±–æ—Ç–∞–µ—Ç —á—É—Ç—å –º–µ–¥–ª–µ–Ω–µ–µ —Ä—É—á–Ω–æ–≥–æ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å. –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º. –ù–æ —Ä–∞–∑–Ω–∏—Ü–∞ —É –Ω–∏—Ö —Å–æ–≤—Å–µ–º –Ω–µ–±–æ–ª—å—à–∞—è.

# # –ê —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º —Å–∞–º—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å  
# ### ...–∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞ –æ—Ç —Å–∞–º–æ–≥–æ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏


#–ù–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–µ 1000 —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
FibonacciNumbers=set()
def findFibonacci():
    for i in range(1000):
        FibonacciNumbers.add(MatrixFibonacci(i))
findFibonacci()
get_ipython().run_line_magic('timeit', 'findFibonacci()')

# –ó–∞–º–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏

#–ü–µ—Ä–≤—ã–µ 100 —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏

drawPlot(sorted(list(FibonacciNumbers))[:100],"–†–æ—Å—Ç —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏","–ß–∏—Å–ª–æ","–ò–Ω–¥–µ–∫—Å")

#–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø–µ—Ä–≤—ã–µ 100 —á–∏—Å–µ–ª

FibonacciNumbers2=set()
for i in range(100):
    FibonacciNumbers2.add(Binetformula(i))
    
#–†—è–¥ –§–∏–±–æ–Ω–∞—á—á–∏ –ø–æ –ë–∏–Ω–µ
print(sorted(FibonacciNumbers2))

print("--------------------------------------------")

#–†—è–¥ –§–∏–±–æ–Ω–∞—á—á–∏ –º–∞—Ç—Ä–∏—á–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
print(sorted((FibonacciNumbers)))


# –ê –¥–∞–≤–∞–π—Ç–µ –ø–æ–ª—É—á–∏–º –≥—Ä–∞—Ñ–∏–∫ –≤ –∫–æ—Ç–æ—Ä–æ–º, –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏? –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?  
# –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞ –º—ã —É–∑–Ω–∞—ë–º —Å–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü –¥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏

FibonacciNumbersT=sorted(list(FibonacciNumbers))[:100]

#–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—è —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö 100 —á–∏—Å–µ–ª
Distances=[FibonacciNumbersT[i]-FibonacciNumbersT[i-1] for i in range(len(FibonacciNumbersT))][1:]
drawPlot(Distances,"–î–∏—Å—Ç–∞–Ω—Ü–∏–∏ –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏","–î–∏—Å—Ç–∞–Ω—Ü–∏—è","–ò–Ω–¥–µ–∫—Å")


# –û–ø! –î–∞ —ç—Ç–æ –∂–µ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –≥—Ä–∞—Ñ–∏–∫. –ö—Å—Ç–∞—Ç–∏ –∏ —á–∏—Å–ª–∞ –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–∫–∏–µ –∂–µ.  
# –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —á—Ç–æ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ $F_0 = 1$, —Ö–æ—Ç—è –ø—Ä–∏–Ω—è—Ç–æ —Å—á–∏—Ç–∞—Ç—å 0  
# –û–¥–Ω–∞–∫–æ, –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—å—è—Ö –∏ —Ñ–æ—Ä—É–º–∞—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤–∞—Ä–∏–∞–Ω—Ç $ F_0=F_1=1 $
# –í–æ—Ç –≤–∞–º –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É. –î–µ–ª–∞—è —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏, –º—ã –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥—É—â–µ–≥–æ  
# –ù–æ —Ç—É—Ç-—Ç–æ –º—ã 0 –Ω–µ –ø–æ–ª—É—á–∞–µ–º, —Ö–æ—Ç—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤ —Ä—è–¥–µ –æ–Ω –µ—Å—Ç—å. –ü–æ—ç—Ç–æ–º—É $ F_0=0=1 $ –±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã.

# ### –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# –ß—Ç–æ —Ç–∞–∫–æ–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–æ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏  
# –ò —è —Ä–µ—à–∏–ª —É–∑–Ω–∞—Ç—å –∫–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤ —Ä—è–¥–µ –§–∏–±–æ–Ω–∞—á—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ—Å—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞

#–û–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ —á–∏—Å–ª–∞ 1000
#–ú—ã —É–∑–Ω–∞–µ–º –∫–∞–∫–æ–≤—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏ –¥–æ N-–æ–≥–æ —á–∏—Å–ª–∞, –≥–¥–µ N - –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏

densities=[(len(list(filter(lambda x: x < i, sorted(FibonacciNumbers))))-1)/i for i in range(1,1000)]
drawPlot(densities,"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏","–ü–ª–æ—Ç–Ω–æ—Å—Ç—å","–ò–Ω–¥–µ–∫—Å")


# –≠—Ç–æ –∫–æ–Ω–µ—á–Ω–æ –æ—á–µ–≤–∏–¥–Ω–æ, –Ω–æ –º—ã –≤–∏–¥–∏–º –ö–ê–ö –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ—Å—Ç–∞ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏.  
# –ü–æ —Å—É—Ç–∏ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∫ –∏–Ω–¥–µ–∫—Å—É.
# –ê –Ω–∞–π–¥—ë–º —Å–∫–æ—Ä–æ—Å—Ç—å? –¢–æ –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞?

adensities=[densities[i]-densities[i-1] for i in range(len(densities)-900)][1:]
drawPlot(adensities,"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏","–°–∫–æ—Ä–æ—Å—Ç—å","–ò–Ω–¥–µ–∫—Å")


# –ü—Ä–∞–≤–¥–∞ —Å–µ–π—á–∞—Å —è –æ–≥—Ä–∞–Ω–∏—á–∏–ª—Å—è –ø–µ—Ä–≤—ã–º–∏ 100 —á–∏—Å–ª–∞–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏, –ø–æ—Å–∫–æ–ª—å–∫—É –¥–∞–ª—å—à–µ –∏–¥—ë—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä—è–º–∞—è –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.
# 
# –ß—Ç–æ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å? –ö–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å, –µ—Å—Ç—å –∫–æ–Ω–µ—á–Ω–æ —Ç–∞–∫–∏–µ —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∞ —Å–∫–∞—á–∫–∏, –Ω–æ –≤ —Ü–µ–ª–æ–º –≤–∏–¥–Ω–æ, —á—Ç–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º => –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –º–µ–∂–¥—É —á–∏—Å–ª–∞–º–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.
# 
# ---
# 
# –ê —Ç–µ–ø–µ—Ä—å –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å...–ï—Å–ª–∏ –Ω–µ –≤—ã—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏, –∞ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è?  
# –ù–∞–ø—Ä–∏–º–µ—Ä —Å–ª–µ–¥—É—é—â–∏–µ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ ...3,5,8,13...
# 
# $ {{5}\over{3}}\approx{{8}\over{5}}\approx{{13}\over{8}} $
# 
# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ? –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –ø–µ—Ä–≤—ã—Ö 20 —á–∏—Å–ª–∞—Ö!

lf=list(sorted(FibonacciNumbers))
ratioFibonacci=[lf[i]/lf[i-1] for i in range(2,len(sorted(FibonacciNumbers))-980)]
drawPlot(ratioFibonacci,"","–û—Ç–Ω–æ—à–µ–Ω–∏–µ","–ò–Ω–¥–µ–∫—Å")


# –ê–≥–∞! –¢–æ –µ—Å—Ç—å —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–¥–Ω–∞–∫–æ –Ω–∞—á–∏–Ω–∞—è —Å 10-–æ–≥–æ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏!  
# –•–æ—Ç—è –Ω–∞—á–∏–Ω–∞—è —Å 6-–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–¥–µ–∫–≤–∞—Ç–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è.
# –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ä—è–¥ –§–∏–±–æ–Ω–∞—á—á–∏ —Å—Ö–æ–¥–∏—Ç—Å—è!  
# –ò –≤–æ—Ç –¥–∞–∂–µ —Ñ–æ—Ä–º—É–ª–∞ $  \lim_{n\to\infty} {{F_{n+1}}\over {F_n}} = \varphi $  
# 
# –û—Ç–Ω–æ—à–µ–Ω–∏–µ —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏ - 1.618, –µ—Å–ª–∏ –æ–∫—Ä—É–≥–ª–∏—Ç—å. –ê —ç—Ç–æ –º–µ–∂–¥—É –ø—Ä–æ—á–∏–º —á–∏—Å–ª–æ **–ó–æ–ª–æ—Ç–æ–≥–æ —Å–µ—á–µ–Ω–∏—è**,  
# –û –∫–æ—Ç–æ—Ä–æ–º –∫—Å—Ç–∞—Ç–∏ —É –º–µ–Ω—è —Ç–æ–∂–µ –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º —Å—Ç–∞—Ç—å—è.
# 
# –ù—É –∞ —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏? –ò–Ω–∞—á–µ –Ω–µ –º–æ–≥–ª–æ –±—ã—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–º–µ–Ω–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–æ—Ä–º—É–ª–∞ –ë–∏–Ω–µ,   
# –∏ –∏–º–µ–Ω–Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É –ó–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ - –∏—Ä—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, —Ç–æ –∏ –ø–æ–ª—É—á–∞—é—Ç—Å—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º—É–ª–µ –ë–∏–Ω–µ.

# ---
# –ù–∞–π–¥—ë–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –º–µ–¥–∏–∞–Ω—É –∏ –º–æ–¥—É –¥–ª—è –ø–µ—Ä–≤—ã—Ö 100 —á–∏—Å–µ–ª

df=pd.Series(sorted(FibonacciNumbers))

print("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = ",df.mean())
print("–ú–µ–¥–∏–∞–Ω–∞",df.median())


# –¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞—é —á—É—Ç–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

# –°–∫–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã—Ö –∏ –Ω–µ—á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏ –≤—ã–±–æ—Ä–∫–æ–π –¥–æ 1000 ?

EvenFibonacci=[int(i) for i in sorted(FibonacciNumbers) if int(i)%2==0]
plt.pie([len(EvenFibonacci),1000-len(EvenFibonacci)], 
        colors=["#A7FF5B","#E7AFFF"],
        labels=["–ß—ë—Ç–Ω—ã–µ","–ù–µ—á—ë—Ç–Ω—ã–µ"], 
        autopct='%1.1f%%',
        shadow=True,
        textprops={'color':"black"})
plt.legend([len(EvenFibonacci),1000-len(EvenFibonacci)])
("")


# –¢–∞–∫-—Ç–∞–∫-—Ç–∞–∫...–ß—ë—Ç–Ω—ã—Ö –≤ –ø–µ—Ä–≤—ã—Ö 1000 —á–∏—Å–ª–∞—Ö –§–∏–±–æ–Ω–∞—á—á–∏ 334 —à—Ç—É–∫–∏, –∞ –Ω–µ—á—ë—Ç–Ω—ã—Ö..666 üòÆüòÆüòÆüòÆüòÆ

# –ê –≤—ã –Ω–µ –¥—É–º–∞–ª–∏, —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –ø–æ –¥—Ä—É–≥–æ–º—É?  
# –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–µ–π—á–∞—Å –º—ã —É–∂–µ –∏–º–µ–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ, –∏ –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—ë—Ç–Ω–æ—Å—Ç—å —É–∂–µ –ø–æ–∑–∂–µ.  
# –ê –ø–æ—á–µ–º—É –±—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏?  
# –ê –º–æ–∂–Ω–æ –ª–∏?  
# –î–∞!  
# 
# –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–µ–º —Ç–∞–∫: –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º –Ω–∞—à—É 100 —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏ –≤ –º–∞—Ç—Ä–∏—Ü–µ, —É –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä 5. 

df=pd.DataFrame(np.reshape(np.array(list(sorted(FibonacciNumbers))[:100]),(-1,5)))
df


# –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞


df=pd.DataFrame(np.reshape(np.array(list(sorted(FibonacciNumbers))[:100]),(-1,5)))
df[df%2==0].fillna("")


# –ö—Ä—É—Ç–æ, –¥–∞?   
# –¢—É—Ç –µ—Å—Ç—å —á—ë—Ç–∫–∞—è –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å.  
# –•–æ—Ç—è –∏ —Ç–∞–∫ –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –ø–æ –ø—Ä–æ—à–ª–æ–π –¥–∏–∞–≥—Ä–∞–º–º–µ, —á—Ç–æ 334 (333 –∏ –Ω–æ–ª—å) –∏–∑ 1000 –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∫–∞–∂–¥–æ–µ —Ç—Ä–µ—Ç—å–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ - —á—ë—Ç–Ω–æ–µ!  
# 
# –î—É–º–∞—é, –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–ø–µ—Ä—å –º–∞—Ç—Ä–∏—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª

#–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç.
#–¢–æ –µ—Å—Ç—å –≤—ã–¥–∞—Å—Ç –±–ª–∏–∂–∞–π—à–µ–µ —á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≤
#–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ä–µ–¥–∏ —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏.

def MatrixFibonacci2(index):
    if(index%3!=0):
        index+=1
        if((index)%3!=0):
            index+=1
    
    return np.linalg.matrix_power(np.matrix(((1,1),(1,0)),dtype=object),index)[0,1]

MatrixFibonacci2(6)


# –ê –º–æ–∂–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ä–∏–Ω–∫–µ, –Ω–æ –∑–∞—Ä–∞–Ω–µ–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å—Å—è —É—Å–ª–æ–≤–∏–µ–º –ø—Ä–æ –∫–∞–∂–¥–æ–µ —Ç—Ä–µ—Ç—å–µ —á–∏—Å–ª–æ

EvenFibonacciNumbers=[MatrixFibonacci(i) for i in range(1,1000) if i%3==0]
EvenFibonacciNumbers[:5]

#–ü–µ—Ä–≤—ã–µ –ø—è—Ç—å —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª


# –ê —Ç–µ–ø–µ—Ä—å –≤–∑–≥–ª—è–Ω–µ–º –Ω–∞ **–ø—Ä–æ—Å—Ç–æ—Ç—É** —á–∏—Å–µ–ª. –ö—Å—Ç–∞—Ç–∏ –Ω–∞ —ç—Ç—É —Ç–µ–º—É —è —Å—Ç–∞—Ç—å—é –Ω–∞–ø–∏—à—É –Ω–µ—Å–∫–æ—Ä–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞, –¥—É–º–∞—é, —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ —Ç—è–∂–µ–ª–æ–µ, —á—Ç–æ –µ—Å—Ç—å –≤ –¢–µ–æ—Ä–∏–∏ –ß–∏—Å–µ–ª.  
# 
# –ï—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ, –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ - —ç—Ç–æ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Ç–æ–ª—å–∫–æ –¥–≤–∞ –¥–µ–ª–∏—Ç–µ–ª—è: 1 –∏ —Å–∞–º–æ —ç—Ç–æ –∂–µ —á–∏—Å–ª–æ  
# –ù–∞–ø—Ä–∏–º–µ—Ä: 5 –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –∏ 5 => –ø—è—Ç—ë—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ.  
# –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è **—Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏**.

PrimeFibonacci=[int(i) for i in sorted(FibonacciNumbers) if sp.isprime(i)]
plt.pie([len(PrimeFibonacci),1000-len(PrimeFibonacci)], 
        colors=["#E7AFFF","#A7FF5B"],
        labels=["–ü—Ä–æ—Å—Ç—ã–µ","–°–æ—Å—Ç–∞–≤–Ω—ã–µ"], 
        autopct='%1.1f%%',
        shadow=True,
        textprops={'color':"black"})
plt.legend([len(PrimeFibonacci),1000-len(PrimeFibonacci)])
("")


# –û—É...–Ω—É —Ç–æ–∂–µ –æ–∂–∏–¥–∞–µ–º–æ. –û–∂–∏–¥–∞–µ–º–æ, —á—Ç–æ –ø—Ä–æ—Å—Ç—ã—Ö –º–Ω–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç.   
# –¢–æ–ª—å–∫–æ 21 —á–∏—Å–ª–æ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º–∏ –≤ –ø–µ—Ä–≤–æ–π —Ç—ã—Å—è—á–µ –§–∏–±–æ–Ω–∞—á—á–∏–∏.  
# –≠—Ç–æ, –∫–∞–∫ –ø–æ–Ω—è—Ç–Ω–æ, 2.1%   
# 
# –ê —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤ 5000 –§–∏–±–æ–Ω–∞—á—á–∏?


PrimeFibonacci=[int(i) for i in sorted([MatrixFibonacci(j) for j in range(5000)]) if sp.isprime(i)]
plt.pie([len(PrimeFibonacci),5000-len(PrimeFibonacci)], 
        colors=["#E7AFFF","#A7FF5B"],
        labels=["–ü—Ä–æ—Å—Ç—ã–µ","–°–æ—Å—Ç–∞–≤–Ω—ã–µ"], 
        autopct='%1.1f%%',
        shadow=True,
        textprops={'color':"black"})
plt.legend([len(PrimeFibonacci),5000-len(PrimeFibonacci)])
("")


# –û–∂–∏–¥–∞–ª–∞—Å—å —Ç–∞–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ, –Ω–æ —Ç–∞–∫-—Ç–æ —Ç–æ–ª—å–∫–æ –¥–≤–∞ —á–∏—Å–ª–∞ –ø—Ä–æ—Å—Ç—ã—Ö –¥–æ–±–∞–≤–∏–ª–æ—Å—å –ø—Ä–∏ –Ω–æ–≤—ã—Ö 4000 –§–∏–±–æ–Ω–∞—á—á–∏. –ó–∞–±–∞–≤–Ω–æ.

# 
# –¢–∞–∫–∂–µ, –≤ –±—É–¥—É—â–µ–º –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å—Ç–∞—Ç—å—é –ø—Ä–æ **–°–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞**.  
# –ù–æ –ø–æ–ø—Ä–æ–±—É–µ–º —É–∂–µ –∏—Ö –Ω–∞–π—Ç–∏ –≤ —á–∏—Å–ª–∞—Ö –§–∏–±–æ–Ω–∞—á—á–∏.  
# –í–∫—Ä–∞—Ç—Ü–µ, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ - —ç—Ç–æ —á–∏—Å–ª–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—É–º–º–∞ –≤—Å–µ—Ö –¥–µ–ª–∏—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —á–∏—Å–ª–∞, —Ä–∞–≤–Ω–∞ —ç—Ç–æ–º—É –∂–µ —á–∏—Å–ª—É.

#–ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–ª–∏—Ç–µ–ª–∏

def Divisors(num): 
    from math import sqrt as mmsq
    s=set([1])
    i=1
    a=int(mmsq(num)+1)
    while i<=a: 
        if(num//i==num):
            i+=1
            continue
        if (num%i==0): 
            if (num//i!=i): 
                s.add(num//i)
            s.add(i)
        i+=1
    return s

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ

def PerfectNumber(num):
    return sum(Divisors(num))==num


# –¢–∞–∫–∂–µ, –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ —Å—É–º–º–∞ –¥–µ–ª–∏—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ –∏ –º–µ–Ω—å—à–µ —á–∏—Å–ª–∞.  
# –¢–∞–∫–∏–µ —á–∏—Å–ª–∞ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è **–ò–∑–±—ã—Ç–æ—á–Ω—ã–µ** –∏ **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ**

#–ò–∑–±—ã—Ç–æ—á–Ω—ã–µ
def AbundantNumber(num):
    return sum(Divisors(num))>num


# –§—É–Ω–∫—Ü–∏—é –¥–µ–ª–∞—Ç—å –¥–ª—è –Ω–µ–¥–æ—Å—Ç–æ—á–Ω—ã—Ö —á–∏—Å–µ–ª –∑–¥–µ—Å—å –Ω–µ –Ω–∞–¥–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –±—É–¥—É—Ç –Ω–µ –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ, –∏ –Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ  
# 
# ---
# 
# –†–µ—à–∏–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–≤—É—é 1000 –§–∏–±–æ–Ω–∞—á—á–∏. –ù–µ –¥–æ–∂–¥–∞–ª—Å—è. –£–∂–µ —Ä–µ—à–∏–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–µ 100. –î–∞–∂–µ –∑–∞ 2 —á–∞—Å–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ!  
# –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –Ω–∞–π—Ç–∏ –¥–µ–ª–∏—Ç–µ–ª–∏ –≤—Å–µ –¥–ª—è —á–∏—Å–µ–ª –±–æ–ª—å—à–µ, —á–µ–º –Ω–∞–ø—Ä–∏–º–µ—Ä $ 10^{35} $ –¥–æ–≤–æ–ª—å–Ω–æ –¥–æ–ª–≥–æ. –û—Å–æ–±–µ–Ω–Ω–æ —ç—Ç–æ —Ç–∞–∫, –∫–æ–≥–¥–∞ —á–∏—Å–µ–ª –±–æ–ª—å—à–∏—Ö –æ—á–µ–Ω—å –º–Ω–æ–≥–æ.  
# –ü–æ—ç—Ç–æ–º—É –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ø–µ—Ä–≤—ã–º–∏ 70 —á–∏—Å–ª–∞–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏.

fibs70=sorted(FibonacciNumbers)[:70]
PerfectFibonacci=[(i) for i in fibs70 if PerfectNumber(i)]
AbundantFibonacci=[(i) for i in fibs70 if AbundantNumber(i)]
piedata=[len(PerfectFibonacci),len(AbundantFibonacci),70-len(PerfectFibonacci)-len(AbundantFibonacci)]

plt.pie(piedata, 
        colors=["#E7AFFF","#A7FF5B","#FFB87A"],
        labels=["–°–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ","–ò–∑–±—ã—Ç–æ—á–Ω—ã–µ","–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ"], 
        autopct='%1.1f%%',
        shadow=True,
        textprops={'color':"black"})
plt.legend(piedata)
("")

#–£—à–ª–æ 30 —Å–µ–∫—É–Ω–¥!


# –ò —á—Ç–æ –º—ã –≤–∏–¥–∏–º? –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ –≤ –ø–µ—Ä–≤—ã—Ö 70 –ø–æ–ø–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–º!  
# –•–æ—Ç—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –∏ —Ç–∞–∫ –Ω–µ —á–∞—Å—Ç–æ –ø–æ–ø–∞–¥–∞—é—Ç—Å—è, –Ω–æ —è —É–±–µ–∂–¥–µ–Ω, —á—Ç–æ —Å —Ä–æ—Å—Ç–æ–º —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –ò–∑–±—ã—Ç–æ—á–Ω—ã—Ö –±—É–¥–µ—Ç –≤—Å—ë –º–µ–Ω—å—à–µ –∏ –º–µ–Ω—å—à–µ.

# ---
# –ê –µ—Å–ª–∏ –≤—Å—Ç–∞–Ω–µ—Ç –∑–∞–¥–∞—á–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ N —á–∏—Å–ª–æ–º –§–∏–±–æ–Ω–∞—á—á–∏?  
# –ù–∞–ø—Ä–∏–º–µ—Ä, 34 - —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏?  
# 
# –ú—ã –Ω–µ –∑–Ω–∞–µ–º...–Ω–æ –º–æ–∂–µ–º —É–∑–Ω–∞—Ç—å!  

def isFibonacci(num):
    from math import log as mlog
    a = 2.07684408521711*mlog(2.237*num)
    return (a % 1 * 100 > 90) or (a % 1 * 100 < 5)

isFibonacci(34)


# –ù—É, –≤—ã–¥–∞–ª–æ True, –æ–¥–Ω–∞–∫–æ —Å—Ç–æ–∏—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º. –≠—Ç–æ –æ–±—Ä–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º—É–ª—ã –ë–∏–Ω–µ.   
# –Ø –∫–æ–Ω–µ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª –º–Ω–æ–≥–æ —á–∏—Å–µ–ª –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–æ –§–∏–±–æ–Ω–∞—á—á–∏, –Ω–æ —Å–º–µ—é –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å, —á—Ç–æ –Ω–∞ –±–æ–ª—å—à–∏—Ö —á–∏—Å–ª–∞—Ö –º–æ–≥—É—Ç –±—ã—Ç—å "–æ–±–º–∞–Ω—ã".
# 
# –•–æ—Ç—è, –≤–æ—Ç –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –û–Ω–æ –¥—É–º–∞–µ—Ç, —á—Ç–æ –∏ 33 - —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏
isFibonacci(33)


# –ï—Å–ª–∏ —Ö–æ—Ä–æ—à–æ –ø–æ–∏–∑—É—á–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ç–µ–º—É, –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –µ—â—ë –æ–¥–Ω—É —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
# $$ n={\log_\varphi{\left({{F_n\sqrt{5}+\sqrt{5F_n^2 \pm 4}}\over{2}}\right)}} $$

def isFibonacci(num):
    from math import log as mlog
    a=mlog(( (num*5**(1/2)+(5*num**2 + 4)**(1/2))/2 ),1.618)
    b=mlog(( (num*5**(1/2)+(5*num**2 - 4)**(1/2))/2 ),1.618)
    a=(a+b)/2
    return (a % 1 * 100 > 99) or (a % 1 * 100 < 1)

isFibonacci(33),isFibonacci(34),isFibonacci(35),isFibonacci(143),isFibonacci(144)


# –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä–∏–ª –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∏—Å–ª–∞—Ö –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é.  
# –ù—É —Ç—É—Ç —É–∂–µ –±–æ–ª–µ–µ –º–µ–Ω–µ–µ –ª—É—á—à–µ.  
# –•–æ—Ç—è –µ—â—ë —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ –¥–∞–ª—å—à–µ.   
# 
# –í–æ–∑–º–æ–∂–Ω–æ —Å —Ä–æ—Å—Ç–æ–º —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∂–∏–º–∞—Ç—å —Ä–∞–º–∫–∏ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ—á–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≥–¥–µ return.   
# –í–∞–∂–Ω–æ, —á—Ç–æ–± –ª–µ–≤–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–µ–º–∏–ª–∞—Å—å –∫ 99.999, –∞ –ø—Ä–∞–≤–∞—è –∫ –Ω—É–ª—é, –æ–¥–Ω–∞–∫–æ –º—ã –Ω–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å —É —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É. –ß–µ–º-—Ç–æ –¥–∞–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ :3

# ---
# ## –°–ª–æ–≤–∞ –§–∏–±–æ–Ω–∞—á—á–∏   
# 
# –° —á–∏—Å–ª–∞–º–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏ :D  
# 
# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–æ–≤–∞–º –§–∏–±–æ–Ω–∞—á—á–∏. –ù–µ–æ–∂–∏–¥–∞–ª–∏?  
# –£ –Ω–∞—Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞ —Ç—É—Ç –±–∞—Ü, –∏ —Å–ª–æ–≤–∞!  
# 
# –ù–æ –Ω–µ –≤—Å—ë —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º, —á—Ç–æ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–∞ –§–∏–±–æ–Ω–∞—á—á–∏.

# >–°–ª–æ–≤–æ –§–∏–±–æ–Ω–∞—á—á–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—É—Ç—ë–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Ç–µ–º –∂–µ –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ –∏ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –æ–±—Ä–∞–∑—É—é—Ç—Å—è –ø—É—Ç—ë–º –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö —Å–ª–æ–∂–µ–Ω–∏–π.

# –¢–æ –µ—Å—Ç—å, –µ—Å–ª–∏ –º—ã –∏–º–µ–µ–º –Ω–∞—á–∞–ª—å–Ω–æ 0,1  
# –°–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á–∏ 0+1=1, –ø–æ–ª—É—á–∏—Ç—Å—è —Ä—è–¥ 0,1,1  
# –°–Ω–æ–≤–∞ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö, 1+1=2 –∏ –±—É–¥–µ—Ç —Ä—è–¥ 0,1,1,2   
# –ù–æ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—à–ª–∏ –ø–æ "–≤–µ—Ç–∫–µ", –∫–æ–≥–¥–∞ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏.  
# –ê –Ω–∞–º –∂–µ –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è. –≠—Ç–æ –∫–æ–≥–¥–∞ –º—ã "—Å–∫–ª–µ–∏–≤–∞–µ–º" —ç–ª–µ–º–µ–Ω—Ç—ã   
# 
# –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–º–µ–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä—è–¥ 0,1  
# "–°–∫–ª–µ–∏–≤–∞–µ–º" –∏—Ö..–ø–æ–ª—É—á–∞–µ–º 01; –¥–æ–±–∞–≤–∏–º –≤ —Ä—è–¥ –∏ –ø–æ–ª—É—á–∏–º 0,1,01  
# –ù–æ –µ—Å—Ç—å –¥–≤–∞ –ù–û.  
# –í–æ 1-—ã—Ö, —Ä—è–¥ —Å–ª–æ–≤–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å $ F_0=0 $ –∏ $ F_1=01 $  
# –í–æ 2-—ã—Ö, –ª—É—á—à–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä—è–¥ –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö (—ç—Ç–æ –∂–µ —Å–ª–æ–≤–æ –∫–∞–∫ –Ω–∏–∫–∞–∫)  
# –ê –µ—Å–ª–∏ –≤—Å—ë –∂–µ –∏ –ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —Ç–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å —á–∏—Å–ª–æ –ø–æ —Ü–∏—Ñ—Ä–∞–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 01 –±—É–¥–µ—Ç 0,1  
# 
# ---
# 
# –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–º N-—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞ –§–∏–±–æ–Ω–∞—á—á–∏, –µ—Å–ª–∏ –º—ã –ø–æ–¥–∞–¥–∏–º –Ω–∞ –≤—Ö–æ–¥ –∏–Ω–¥–µ–∫—Å

def IterationFibonacciWord(index):
    Sn_1 = "0"
    Sn = "01"
    tmp = "" 
    for i in range(2, index + 1): 
        tmp = Sn
        Sn += Sn_1 
        Sn_1 = tmp 
    return Sn 

IterationFibonacciWord(1),IterationFibonacciWord(2)


# –°–µ–π—á–∞—Å –º—ã —Å–æ–∑–¥–∞–ª–∏ –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥. –ê –µ—Å—Ç—å –ª–∏ **–∑–∞–∫—Ä—ã—Ç–∞—è** —Ñ–æ—Ä–º–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞?  
# –ö–æ–Ω–µ—á–Ω–æ, –µ—Å—Ç—å. –¢–æ–ª—å–∫–æ —Ç—É—Ç –º—ã –Ω–∞—Ö–æ–¥–∏–º —Å–∫–æ—Ä–µ–π –Ω–µ —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞, –∞ —Ü–∏—Ñ—Ä—É.

def FibonacciWord(index):
    from math import floor as mmmfloor
    return ((mmmfloor(index*1.618)-mmmfloor((index+1)*1.618))+2)


for i in range(30):
    print(FibonacciWord(i),end="")


# –í—Ä–æ–¥–µ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–≤—ã–µ 10 —Ü–∏—Ñ—Ä(–±—É–∫–≤) –≤—Å–µ–≥–æ —Å–ª–æ–≤–∞ –§–∏–±–æ–Ω–∞—á—á–∏, –Ω–æ –æ–Ω–∏ –∫–∞–∫-—Ç–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è...   
# –≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫—Ä–æ–ª–∏—á—å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–∏–±–æ **–∑–æ–ª–æ—Ç–∞—è —Å—Ç—Ä—É–Ω–∞**  
# –ö–∞–∫ —ç—Ç–æ –ø–æ—á–∏–Ω–∏—Ç—å –Ω–∞–¥–æ –µ—â—ë –ø–æ–¥—É–º–∞—Ç—å.

# –ò –≤—Å—ë –∂–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∏—Ç—å "—Å–ª–æ–≤–æ", —Ç–æ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ä—è–¥, —Ç–æ –ø—Ä–æ—â–µ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –¥–ª—è —ç—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏—é.

def IterationFibonacciWords(indexLimit):
    Sn_1="0"
    Sn="01"
    tmp="" 
    word=[Sn_1,Sn]
    for i in range(2, indexLimit + 1): 
        tmp=Sn
        Sn+=Sn_1 
        Sn_1=tmp 
        word.append(Sn)
    return word


# –ü–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ –≤–∏–∑—É–∞–ª—å–Ω–æ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π —Ä—è–¥

myword1=list(map(int,"".join(IterationFibonacciWords(5))))
x = range(len(myword1))
ax = plt.gca()
ax.bar(x, myword1)
ax.set_xticks(x)
plt.show()


# –ù–µ –æ—á–µ–Ω—å –ø–æ–Ω—è—Ç–Ω–æ –∑–∞—á–µ–º –∏ –∫–∞–∫. –í–æ–∑–Ω–∏–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, –∞ –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–∫–æ–≥–æ —Ä—è–¥–∞?  
# –û—Ç–≤–µ—Ç: –∫–æ–Ω–µ—á–Ω–æ –µ—Å—Ç—å!   
# 
# –£ –Ω–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∏—Å–æ–≤–∞—Ç—å —Ñ—Ä–∞–∫—Ç–∞–ª—ã! –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ "–¥–≤–∏–≥–∞—Ç—å—Å—è" –≤–¥–æ–ª—å —Ä—è–¥–∞. –£—á—Ç—ë–º –ø—Ä–∞–≤–∏–ª–∞:  
# 1. –î–≤–∏–∂–µ–º—Å—è –≤–ø–µ—Ä—ë–¥
# 2. –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–∏—Ñ—Ä–∞ 0:  
#     –ü–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ª–µ–≤–æ, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è —á—ë—Ç–Ω—ã–π  
#     –ü–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ø—Ä–∞–≤–æ, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ—á—ë—Ç–Ω—ã–π

#–°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç–∏–Ω–∫—É 600—Ö600, –∏ —Å—Ç–∞–≤–∏–º –∫—É—Ä—Å–æ—Ä –æ—Ç –∫—É–¥–∞ –±—É–¥–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å —á—É—Ç—å –Ω–∏–∂–µ —Ü–µ–Ω—Ç—Ä–∞

N=600
t = turtle.Turtle(fixed=False, width=N, height=N)
t.hideturtle()
t.penup()
t.back(N/2.2)
t.right(90)
t.forward(N/2.2)
t.left(90)
t.pendown()
t

#–î–ª–∏–Ω–∞ —à–∞–≥–∞
step=2

j=0
k=0
while j<17:
    if(k==0):
        myword='0'
    else:
        myword=IterationFibonacciWord(j)
    for i in myword:
        t.forward(step)
        if(i=='0'):
            if((k)%2!=0):
                t.left(90)
            else:
                t.right(90)
        k+=1
    j+=1
    time.sleep(0.01)


# –ò —Ç–∞–∫–æ–π –≤–æ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —É–∑–æ—Ä —É –Ω–∞—Å –ø–æ–ª—É—á–∞–µ—Ç—Å—è!  
# –ü—Ä–∏—á—ë–º, –æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏  
# –ï—Å–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ –∏–º–µ—Ç—å –¥–∞—Ç–∞—Å–µ—Ç, —Ç–æ —Ä–∏—Å–æ–≤–∞—Ç—å –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ–ª—å—à–µ –∏–∑-–∑–∞ –¥–æ–ª–≥–∏—Ö —Ä–∞—Å–ø–∞–∫–æ–≤–æ–∫
# 
# –ö—Å—Ç–∞—Ç–∏, –∞ –º–æ–∂–µ—Ç –ª–∏ —Ä–∏—Å–æ–≤–∞—Ç—å —Ñ—Ä–∞–∫—Ç–∞–ª—ã —Ä—è–¥ —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏?  
# –î–∞, –º–æ–∂–µ—Ç, –Ω–æ —ç—Ç–æ –∫–æ—Å–Ω—ë—Ç—Å—è —Ç–µ–º—ã **–∑–æ–ª–æ—Ç–æ–≥–æ —Å–µ—á–µ–Ω–∏—è** –≤ –æ–¥–Ω–æ–π –∏–∑ –º–æ–∏—Ö –±—É–¥—É—â–∏—Ö —Å—Ç–∞—Ç—å–µ–π

# # –ö–æ–Ω–µ—Ü  
# 
# –ù–∞ —ç—Ç–æ–º –≤—Å—ë, –¥–æ—Ä–æ–≥–∏–µ —á–∏—Ç–∞—Ç–µ–ª–∏!  
# –ù–∞–¥–µ—é—Å—å –≤–∞–º –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ —Ç–∞–∫–æ–≥–æ –∏–∑ –∑–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ üòç
# 
# –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç—å–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —á–µ–≥–æ-–ª–∏–±–æ –¥—Ä—É–≥–æ–≥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä –¥—Ä—É–≥–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
# –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –º—ã—Å–ª–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ...–ú–æ–∂–µ—Ç –Ω–∞–π–¥—É —á—Ç–æ –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å.

# ---
# 
# –ó–¥–µ—Å—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç—ã —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
# [–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏](https://github.com/lonagi/pysasha/tree/master/datasets/Number%20Theory/Fibonacci)  
# 
# –ü–æ—á–µ–º—É —è —Å–∫–∞–∑–∞–ª –¥–∞—Ç–∞—Å–µ—Ç—ã? –ï—Å–ª–∏ –≤–∑—è—Ç—å 100 000 —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏ –≤ 1 —Ñ–∞–π–ª, —Ç–æ —É —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –≤–µ—Å –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 1 –ì–ë.   
# –Ø –¥—É–º–∞—é, —á—Ç–æ –ª—É—á—à–µ –ø–æ —á–∞—Å—Ç—è–º (–ø–æ —á–∞–Ω–∫–∞–º) —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ .csv

# –ï—Å–ª–∏ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é –Ω–∞ –¥—Ä—É–≥–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ, —Ç–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Ç –Ω–∏–∂–µ —Å—Å—ã–ª–∫–∏:

# [–í–ö–æ–Ω—Ç–∞–∫—Ç–µ](https://vk.com/lonagi)  
# [Lonagi](https://vk.com/lonagi)  
# [Instagram](https://vk.com/lonagi)    
# [Facebook](https://vk.com/lonagi)    
# [Github](https://vk.com/lonagi) 